[algorithms]
#The speed of reducing temperature
TLambda=0.001
#The speed of moving step change
K=1
#The coefficient of moving step
C=1
#Initial temperature
T=50000
#Initial time interval for information of different cores to exchange
R=300
#Initial time for selecting random initial position and step adjustment
InitLoopTime=3000
#The time interval to renew the acceptance rate p, larger ItemStoreSize will reduce the accuracy of the final result and enlarge the time consumed, but less ItemStoreSize will make the program unstable
ItemStoreSize=10

[system]
#The number of processors used, using mpiexec -n <CpuNumber> python main.py 
CpuNumber=8

[model]
#The dimension of the parameter space
ParameterNumber=2
#The upper barrier of the parameter space, using inf if no barrier defined
RangeHigh=32,32
#The lower barrier of the parameter space, using -inf if no barrier defined
RangeLow=-32,-32
#if inf or -inf, at least give a range of [-setrange,setrange]
setrange=1
#The command name of the forward program. Since just writing a small code will enable feathers such as ./a 2 3 4, in which 2,3,4 are parameters input, and the program return a simple value such as 222.344 as the object value that need to be optimized.
CommandName=./test/exec/d
#sensity of different parameters. If you want to move a parameter more quickily, just enlarge the value accordingly
sensity=1,1
#Initial moving step, not matter actually
stopMoveStep=0.0001,0.0001
#criterio of stoping. Any core which moves its step less than theta for stopRepeateTimes times will cause the program to end
stopRepeateTimes=40
theta=0.0001

energyC=1

logFileName=logfile
